// По сети приходят данные, они последователь упаковываются в массив, во-время обработки запроса
// к данным добавляется параметр latency, который указывает на сетевую задержку, которая возникла
// при его обработки, таким образом конечный массив выглядит таким образом: [{latency: 10, payload: {...}}, {...}].
// Вам требуется вывести первые 10 запросов, с наименьшей сетевой задержкой

// Input: [10, 12, 13, 5, 13, 21, 44, 10, 11, 8, 9, 8, 76, 23]
// Output: [5, 8, 8, 9, 10, 11, 12, 13, 13, 21]

// Вариант 1
// Время O(n * log(n))
// Память O(1)

const arr = [10, 12, 13, 5, 13, 21, 44, 10, 11, 8, 9, 8, 76, 23];

const printMinLatency = (arr) => {
  arr.sort();
  return arr.slice(0, 10);
};

// Вариант 2
// Время O(10 * n) = O(const * n) = O(n)
// Память O(1)

const printMinLatency_2 = (arr) => {
  for (let i = 0; i < 10; i++) {
    let minIndex = i;
    for (let j = i + 1; j < arr.length; j++) {
      if (arr[j] < arr[minIndex]) {
        minIndex = j;
      }
    }
    [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]];
  }

  return arr.slice(0, 10);
};